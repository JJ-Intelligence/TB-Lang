-- Challenge 1, solution 1
-- setIn([0,1]);

-- as = in(0);
-- bs = in(1);

-- while (hasElems(2, as)) {
--     out(popN(2, as));
--     out(pop(bs));
-- };

-- if (isEmpty(as) == False) {
--     out(pop(as));
-- };

-- while (length(xs) > 2) {
--     out(take(2, xs));
--     xs = drop(2, xs);
-- }


-- x = 5;

-- type solve (Int) -> Int;
-- func solve (n) = {
--     global x = True;
--     return (1);
-- };

-- out(solve(9));
-- out(x+1);

-- x = 1;
-- y = &x;
-- *y = *y + 5;
-- out(x);
-- out(*y);

-- xs = [1,2];

-- if (length(xs) == 1) {
--     out(head(xs));
-- } elif (xs == [1,2]) {
--     out(xs);
-- } else {
--     out(0);
-- };

-- for (i = 0; i < 10; i++) {
--     out(i);
-- };

-- while (length(xs) < 10) {
--     xs = 1:xs;
-- };



-- Challenge 1, solution 1
-- type solve ((Itr Int)*, (Itr Int)*) -> NoneType;
-- func solve (*[], *bs) = None;
-- func solve (*[a], *bs) = out([a]);
-- func solve (*(a1:a2:as), *(b:bs)) = {
--     out([a1,a2,b]);
--     solve(as, bs);
-- };

-- setIn([0,1]);

-- solve(in(0), in(1));

--type map ([a], (a) -> b) -> [b];
--func map ([], f) = [];
--func map (x:xs, f) = f(x) : map (xs, f);

--type square (Int) -> Bool;
--func square (n) = n == 2;

--out(map ([1,2,3,4], square));


type filter ((a) -> Bool, [a]) -> [a];
func filter (f, []) = [];
func filter (f, (x:xs)) = {
    if (f(x)) {
        return (x : filter (f, xs));
    };

    return (filter (f, xs));
};

type isEven (Int) -> Bool;
func isEven (n) = n % 2 == 0;

out(filter(isEven, [1,2,3,4]));
