"Lexered\n"
"Parsed: "
Seq (LocalAssign (DefVar "as" (FuncCall "in" (FuncParam (Literal 0) FuncParamEnd)))) (Seq (LocalAssign (DefVar "bs" (FuncCall "in" (FuncParam (Literal 1) FuncParamEnd)))) (Seq (FuncCall "peekN" (FuncParam (Literal 500000) (FuncParam (Var "as") FuncParamEnd))) (Seq (While (FuncCall "hasElems" (FuncParam (Literal 1) (FuncParam (Var "bs") FuncParamEnd))) (Seq (FuncCall "out" (FuncParam (FuncCall "pop" (FuncParam (Var "as") FuncParamEnd)) FuncParamEnd)) (Seq (FuncCall "out" (FuncParam (FuncCall "pop" (FuncParam (Var "as") FuncParamEnd)) FuncParamEnd)) (FuncCall "out" (FuncParam (FuncCall "pop" (FuncParam (Var "bs") FuncParamEnd)) FuncParamEnd))))) (If (FuncCall "hasElems" (FuncParam (Literal 2) (FuncParam (Var "as") FuncParamEnd))) (Seq (FuncCall "out" (FuncParam (FuncCall "pop" (FuncParam (Var "as") FuncParamEnd)) FuncParamEnd)) (FuncCall "out" (FuncParam (FuncCall "pop" (FuncParam (Var "as") FuncParamEnd)) FuncParamEnd))) (Just elif (FuncCall "hasElems" (FuncParam (Literal 1) (FuncParam (Var "as") FuncParamEnd))) {
FuncCall "out" (FuncParam (FuncCall "pop" (FuncParam (Var "as") FuncParamEnd)) FuncParamEnd)
}
)))))

"Preprocessing: "
"Evaluating: "
reading input:
